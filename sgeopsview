#!/bin/bash

# Copyright (c) 2013, UCL
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

# Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
# Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided 
# with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN 
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# Author: Francesco Tusa


# chkconfig: 345 99 01
# description: this daemon injects SGE load sensors data into Opsview

# processname: SGEOpsview
# pidfile: /var/run/SGEOpsview.pid

# Source function library
. /etc/rc.d/init.d/functions

prog=SGEOpsview.py
path=/opt/ucl/opsview-gridengine-integration
conf=conf.json
env=sge-env #this is used for starting the daemon through the 'service' command

pidfile=/var/run/$prog.pid
lockfile=/var/lock/subsys/$prog

[ -f $path/$env ] && . $path/$env


start() 
     {
      echo -n "Starting $prog service: "

      pid=`ps aux | grep python | grep $prog | awk '{print $2}'`

      if [ -z "$pid" ]; then
          daemon "/usr/bin/python $path/$prog -c $path/$conf"
          pid=`ps aux | grep python | grep $prog | awk '{print $2}'`     

          if [ -n $pid ]; then
              echo $pid > $pidfile
          else
              failure $"Starting $prog"
          fi

          RETVAL=$?
          echo
 
          [ $RETVAL = 0 ] && touch $lockfile
          return $RETVAL

      else
          failure $"Starting $prog"
      fi
    }


stop()
    {
     echo -n "Shutting down $prog service: "

     if [ -n "`pidfileofproc $path/$prog`" ] ; then
         killproc -p $pidfile $path/$prog
     else            
        failure $"Stopping $prog"
        fi
     
     RETVAL=$?
     echo
     [ $RETVAL = 0 ] && rm $lockfile
    }


syncAndStart()
     {
      echo -n "Starting $prog service: "

      pid=`ps aux | grep python | grep $prog | awk '{print $2}'`

      if [ -z "$pid" ]; then
          daemon "/usr/bin/python $path/$prog -c $path/$conf -s"
          pid=`ps aux | grep python | grep $prog | awk '{print $2}'`

          if [ -n $pid ]; then
              echo $pid > $pidfile
          else
              failure $"Starting $prog"
          fi

          RETVAL=$?
          echo

          [ $RETVAL = 0 ] && touch $lockfile
          return $RETVAL

      else
          failure $"Starting $prog"
      fi
    }


zap()
     {
     echo "Manually resetting $prog service: "

     kill `ps aux | grep python | grep $prog | awk '{print $2}'` 2> /dev/null
     rm -f $pidfile $lockfile
     }



case "$1" in
        start)
              start
        ;;

        stop)
             stop
        ;;

        status)
                status $path/$prog 
        ;;

        sync)
                stop
                syncAndStart
        ;;

        restart)
                stop 
                start
        ;;

        zap)
                zap
        ;;

        *)
                echo "Usage: $0 {start|stop|status|restart|sync|zap}"
                exit 1
        ;;
esac
